REDUCE:

Use: 
--  used for counter opertaions.
--  sum of certain values inside a field of internal table using some conditions.
--  find the subtotal/ total of perticular column of the internal table.

data v1 = REDUCE i( ) --> reduce the integer(i) type expression inside in the brackets, and store into the internal table.

Ex: to find the sum of first 10 numbers using REDUCE operator.
1+2+3+4+5+6+7+8+9+10 = 55

old syntax.
data i type i value 1.
data sum type i.
do 10 times.
 sum = sum + i.
 i = i + 1.
enddo.

write sum.
sum = 55.

new syntax:
REDUCE:
data(v1) = REDUCE i( INIT SUM = 0 for i = 1 then i + 1 until i = 10 next sum = sum + i ).
write v1.
1.  it is reduceing the data type i(integer values).
2.  initializing the sum i.e sum = 0.
3.  looping with i value up to i = 10 and increment the value by 1. --> for i = 1 then i + 1 until i = 10
4.  every loop i value is summation to the sum varaible. sum = sum + i.
5. and finally sum value stored into the another varaible i.e v1.

output:
55.

Note : in above statement if i will not specifieng "THEN i + 1" again output is 55 ?, because bydefault increment value is '1'.
suppose if you want increment value with '2' --> then we have mention it as " THEN i + 2.
if you want decrement in for use the "THEN i - 2 ".

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

REDUCE Operator for string data type .

Increment and concatenate:
____________________________
data( v1 ) = reduce string( init text = `Count up:` for i = 1 until i = 10 next text = text && | { i } |).
write v1.

output:
Count up: 1 2 3 4 5 6 7 8 9 10.

-- reducing the string data type 
-- initializing the text varaible with value
-- for loop is used for increment the value, up to 10 -for i = 1 until i = 10
-- next i value is concatenating with the text varaible- next text = text && | { i } |
-- { i } means i is integer type, while caoncatenating we need to convert the 'i' to string .
-- here implicit incremetn happening here "then i + 1."

decrement and concatenate:
__________________________

data( v1 ) = reduce string( init text = `Count down` for i = 1 then i - 1 until i < 10 next text = text && | { i } | ).

output:
Count down: 10 9 8 7 6 5 4 3 2 1.

data( v1 ) = reduce string( init text = `Count down` for i = 1 then i - 2 until i < 10 next text = text && | { i } | ).

output:
Count down: 10 8 6 4 2.  <- even numbers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

REDUCE - INTERNAL TABLE:

types : begin of ty_student,
          name type char20,
          subject type char20,
          marks type i,
        end of ty_Student.
        
data it_Student type table of ty_student.

it_student = value #( for i = 1 until i < 5 ( name = 'Student' && i subject = 'Physics' marks = i ) ).
cl_demo_output=>display( it_student ).

output:
name          subject           marks
Student 1     Physics           1
Student 2     Physics           2
Student 3     Physics           3
Student 4     Physics           4


Note : REDUCE operator might be used with integer data type ..
new sysntax:
data( v1 ) = REDUCE i( INIT total=0 for wa in it_Student next total=total + i ).
cl_demo_output=>display( v1 ).


old syntax:
loop at it_Student into wa.
 total = total + wa-marks.
endloop.
v1 = total.
write v1.

output.
v1
55

Appending new entry to the internal table it_Student.
append value #( name = 'Staudent 4' subject = 'Maths' marks = 5 ) to it_Student.
cl_Demo_output=>display( it_Student ).

output:
name          subject           marks
Student 1     Physics           1
Student 2     Physics           2
Student 3     Physics           3
Student 4     Physics           4
student 4     maths             5

Now i want to summing marks which is equals to student 4.

data( v1 ) = REDUCE i( INIT total=0 for wa in it_Student where ( name = 'Student 4' ) next total=total + i ).
cl_demo_output=>display( v1 ).

Output
v1
9






